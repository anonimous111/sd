#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.586
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sd_final
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="sd_test")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertsd_cat(sd_cat instance);
    partial void Updatesd_cat(sd_cat instance);
    partial void Deletesd_cat(sd_cat instance);
    partial void Insertsd_history(sd_history instance);
    partial void Updatesd_history(sd_history instance);
    partial void Deletesd_history(sd_history instance);
    partial void Insertsd_priv(sd_priv instance);
    partial void Updatesd_priv(sd_priv instance);
    partial void Deletesd_priv(sd_priv instance);
    partial void Insertsd_problem(sd_problem instance);
    partial void Updatesd_problem(sd_problem instance);
    partial void Deletesd_problem(sd_problem instance);
    partial void Insertsd_status(sd_status instance);
    partial void Updatesd_status(sd_status instance);
    partial void Deletesd_status(sd_status instance);
    partial void Insertsd_user(sd_user instance);
    partial void Updatesd_user(sd_user instance);
    partial void Deletesd_user(sd_user instance);
    partial void Insertsd_users_on_inc(sd_users_on_inc instance);
    partial void Updatesd_users_on_inc(sd_users_on_inc instance);
    partial void Deletesd_users_on_inc(sd_users_on_inc instance);
    partial void Insertsd_inc(sd_inc instance);
    partial void Updatesd_inc(sd_inc instance);
    partial void Deletesd_inc(sd_inc instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::sd_final.Properties.Settings.Default.sd_testConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<sd_cat> sd_cats
		{
			get
			{
				return this.GetTable<sd_cat>();
			}
		}
		
		public System.Data.Linq.Table<sd_history> sd_histories
		{
			get
			{
				return this.GetTable<sd_history>();
			}
		}
		
		public System.Data.Linq.Table<sd_priv> sd_privs
		{
			get
			{
				return this.GetTable<sd_priv>();
			}
		}
		
		public System.Data.Linq.Table<sd_problem> sd_problems
		{
			get
			{
				return this.GetTable<sd_problem>();
			}
		}
		
		public System.Data.Linq.Table<sd_status> sd_status
		{
			get
			{
				return this.GetTable<sd_status>();
			}
		}
		
		public System.Data.Linq.Table<sd_user> sd_users
		{
			get
			{
				return this.GetTable<sd_user>();
			}
		}
		
		public System.Data.Linq.Table<sd_users_on_inc> sd_users_on_incs
		{
			get
			{
				return this.GetTable<sd_users_on_inc>();
			}
		}
		
		public System.Data.Linq.Table<sd_inc> sd_incs
		{
			get
			{
				return this.GetTable<sd_inc>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_cat")]
	public partial class sd_cat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private EntitySet<sd_inc> _sd_incs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public sd_cat()
		{
			this._sd_incs = new EntitySet<sd_inc>(new Action<sd_inc>(this.attach_sd_incs), new Action<sd_inc>(this.detach_sd_incs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_cat_sd_inc", Storage="_sd_incs", ThisKey="id", OtherKey="sd_cat_id")]
		public EntitySet<sd_inc> sd_incs
		{
			get
			{
				return this._sd_incs;
			}
			set
			{
				this._sd_incs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sd_incs(sd_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_cat = this;
		}
		
		private void detach_sd_incs(sd_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_cat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_history")]
	public partial class sd_history : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _sd_user_id;
		
		private string _action;
		
		private System.Nullable<System.DateTime> _date;
		
		private long _sd_inc_id;
		
		private string _a_descr;
		
		private EntityRef<sd_user> _sd_user;
		
		private EntityRef<sd_inc> _sd_inc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onsd_user_idChanging(System.Nullable<long> value);
    partial void Onsd_user_idChanged();
    partial void OnactionChanging(string value);
    partial void OnactionChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void Onsd_inc_idChanging(long value);
    partial void Onsd_inc_idChanged();
    partial void Ona_descrChanging(string value);
    partial void Ona_descrChanged();
    #endregion
		
		public sd_history()
		{
			this._sd_user = default(EntityRef<sd_user>);
			this._sd_inc = default(EntityRef<sd_inc>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sd_user_id", DbType="BigInt")]
		public System.Nullable<long> sd_user_id
		{
			get
			{
				return this._sd_user_id;
			}
			set
			{
				if ((this._sd_user_id != value))
				{
					if (this._sd_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsd_user_idChanging(value);
					this.SendPropertyChanging();
					this._sd_user_id = value;
					this.SendPropertyChanged("sd_user_id");
					this.Onsd_user_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action", DbType="VarChar(MAX)")]
		public string action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sd_inc_id", DbType="BigInt NOT NULL")]
		public long sd_inc_id
		{
			get
			{
				return this._sd_inc_id;
			}
			set
			{
				if ((this._sd_inc_id != value))
				{
					if (this._sd_inc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsd_inc_idChanging(value);
					this.SendPropertyChanging();
					this._sd_inc_id = value;
					this.SendPropertyChanged("sd_inc_id");
					this.Onsd_inc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_a_descr", DbType="VarChar(MAX)")]
		public string a_descr
		{
			get
			{
				return this._a_descr;
			}
			set
			{
				if ((this._a_descr != value))
				{
					this.Ona_descrChanging(value);
					this.SendPropertyChanging();
					this._a_descr = value;
					this.SendPropertyChanged("a_descr");
					this.Ona_descrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_user_sd_history", Storage="_sd_user", ThisKey="sd_user_id", OtherKey="id", IsForeignKey=true)]
		public sd_user sd_user
		{
			get
			{
				return this._sd_user.Entity;
			}
			set
			{
				sd_user previousValue = this._sd_user.Entity;
				if (((previousValue != value) 
							|| (this._sd_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_user.Entity = null;
						previousValue.sd_histories.Remove(this);
					}
					this._sd_user.Entity = value;
					if ((value != null))
					{
						value.sd_histories.Add(this);
						this._sd_user_id = value.id;
					}
					else
					{
						this._sd_user_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("sd_user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_inc_sd_history", Storage="_sd_inc", ThisKey="sd_inc_id", OtherKey="id", IsForeignKey=true)]
		public sd_inc sd_inc
		{
			get
			{
				return this._sd_inc.Entity;
			}
			set
			{
				sd_inc previousValue = this._sd_inc.Entity;
				if (((previousValue != value) 
							|| (this._sd_inc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_inc.Entity = null;
						previousValue.sd_histories.Remove(this);
					}
					this._sd_inc.Entity = value;
					if ((value != null))
					{
						value.sd_histories.Add(this);
						this._sd_inc_id = value.id;
					}
					else
					{
						this._sd_inc_id = default(long);
					}
					this.SendPropertyChanged("sd_inc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_priv")]
	public partial class sd_priv : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private EntitySet<sd_user> _sd_users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public sd_priv()
		{
			this._sd_users = new EntitySet<sd_user>(new Action<sd_user>(this.attach_sd_users), new Action<sd_user>(this.detach_sd_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_priv_sd_user", Storage="_sd_users", ThisKey="id", OtherKey="priv")]
		public EntitySet<sd_user> sd_users
		{
			get
			{
				return this._sd_users;
			}
			set
			{
				this._sd_users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sd_users(sd_user entity)
		{
			this.SendPropertyChanging();
			entity.sd_priv = this;
		}
		
		private void detach_sd_users(sd_user entity)
		{
			this.SendPropertyChanging();
			entity.sd_priv = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_problem")]
	public partial class sd_problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private string _desigion;
		
		private EntitySet<sd_inc> _sd_incs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndesigionChanging(string value);
    partial void OndesigionChanged();
    #endregion
		
		public sd_problem()
		{
			this._sd_incs = new EntitySet<sd_inc>(new Action<sd_inc>(this.attach_sd_incs), new Action<sd_inc>(this.detach_sd_incs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_desigion", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string desigion
		{
			get
			{
				return this._desigion;
			}
			set
			{
				if ((this._desigion != value))
				{
					this.OndesigionChanging(value);
					this.SendPropertyChanging();
					this._desigion = value;
					this.SendPropertyChanged("desigion");
					this.OndesigionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_problem_sd_inc", Storage="_sd_incs", ThisKey="id", OtherKey="sd_problem_id")]
		public EntitySet<sd_inc> sd_incs
		{
			get
			{
				return this._sd_incs;
			}
			set
			{
				this._sd_incs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sd_incs(sd_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_problem = this;
		}
		
		private void detach_sd_incs(sd_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_problem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_status")]
	public partial class sd_status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private EntitySet<sd_inc> _sd_incs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public sd_status()
		{
			this._sd_incs = new EntitySet<sd_inc>(new Action<sd_inc>(this.attach_sd_incs), new Action<sd_inc>(this.detach_sd_incs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_status_sd_inc", Storage="_sd_incs", ThisKey="id", OtherKey="sd_status_id")]
		public EntitySet<sd_inc> sd_incs
		{
			get
			{
				return this._sd_incs;
			}
			set
			{
				this._sd_incs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sd_incs(sd_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_status = this;
		}
		
		private void detach_sd_incs(sd_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_users")]
	public partial class sd_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _login;
		
		private string _password;
		
		private string _fio;
		
		private long _priv;
		
		private EntitySet<sd_history> _sd_histories;
		
		private EntitySet<sd_users_on_inc> _sd_users_on_incs;
		
		private EntityRef<sd_priv> _sd_priv;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnfioChanging(string value);
    partial void OnfioChanged();
    partial void OnprivChanging(long value);
    partial void OnprivChanged();
    #endregion
		
		public sd_user()
		{
			this._sd_histories = new EntitySet<sd_history>(new Action<sd_history>(this.attach_sd_histories), new Action<sd_history>(this.detach_sd_histories));
			this._sd_users_on_incs = new EntitySet<sd_users_on_inc>(new Action<sd_users_on_inc>(this.attach_sd_users_on_incs), new Action<sd_users_on_inc>(this.detach_sd_users_on_incs));
			this._sd_priv = default(EntityRef<sd_priv>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fio", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string fio
		{
			get
			{
				return this._fio;
			}
			set
			{
				if ((this._fio != value))
				{
					this.OnfioChanging(value);
					this.SendPropertyChanging();
					this._fio = value;
					this.SendPropertyChanged("fio");
					this.OnfioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priv", DbType="BigInt NOT NULL")]
		public long priv
		{
			get
			{
				return this._priv;
			}
			set
			{
				if ((this._priv != value))
				{
					if (this._sd_priv.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprivChanging(value);
					this.SendPropertyChanging();
					this._priv = value;
					this.SendPropertyChanged("priv");
					this.OnprivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_user_sd_history", Storage="_sd_histories", ThisKey="id", OtherKey="sd_user_id")]
		public EntitySet<sd_history> sd_histories
		{
			get
			{
				return this._sd_histories;
			}
			set
			{
				this._sd_histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_user_sd_users_on_inc", Storage="_sd_users_on_incs", ThisKey="id", OtherKey="sd_user_id")]
		public EntitySet<sd_users_on_inc> sd_users_on_incs
		{
			get
			{
				return this._sd_users_on_incs;
			}
			set
			{
				this._sd_users_on_incs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_priv_sd_user", Storage="_sd_priv", ThisKey="priv", OtherKey="id", IsForeignKey=true)]
		public sd_priv sd_priv
		{
			get
			{
				return this._sd_priv.Entity;
			}
			set
			{
				sd_priv previousValue = this._sd_priv.Entity;
				if (((previousValue != value) 
							|| (this._sd_priv.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_priv.Entity = null;
						previousValue.sd_users.Remove(this);
					}
					this._sd_priv.Entity = value;
					if ((value != null))
					{
						value.sd_users.Add(this);
						this._priv = value.id;
					}
					else
					{
						this._priv = default(long);
					}
					this.SendPropertyChanged("sd_priv");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sd_histories(sd_history entity)
		{
			this.SendPropertyChanging();
			entity.sd_user = this;
		}
		
		private void detach_sd_histories(sd_history entity)
		{
			this.SendPropertyChanging();
			entity.sd_user = null;
		}
		
		private void attach_sd_users_on_incs(sd_users_on_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_user = this;
		}
		
		private void detach_sd_users_on_incs(sd_users_on_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_users_on_inc")]
	public partial class sd_users_on_inc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _sd_user_id;
		
		private long _sd_inc_id;
		
		private EntityRef<sd_user> _sd_user;
		
		private EntityRef<sd_inc> _sd_inc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onsd_user_idChanging(long value);
    partial void Onsd_user_idChanged();
    partial void Onsd_inc_idChanging(long value);
    partial void Onsd_inc_idChanged();
    #endregion
		
		public sd_users_on_inc()
		{
			this._sd_user = default(EntityRef<sd_user>);
			this._sd_inc = default(EntityRef<sd_inc>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sd_user_id", DbType="BigInt NOT NULL")]
		public long sd_user_id
		{
			get
			{
				return this._sd_user_id;
			}
			set
			{
				if ((this._sd_user_id != value))
				{
					if (this._sd_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsd_user_idChanging(value);
					this.SendPropertyChanging();
					this._sd_user_id = value;
					this.SendPropertyChanged("sd_user_id");
					this.Onsd_user_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sd_inc_id", DbType="BigInt NOT NULL")]
		public long sd_inc_id
		{
			get
			{
				return this._sd_inc_id;
			}
			set
			{
				if ((this._sd_inc_id != value))
				{
					if (this._sd_inc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsd_inc_idChanging(value);
					this.SendPropertyChanging();
					this._sd_inc_id = value;
					this.SendPropertyChanged("sd_inc_id");
					this.Onsd_inc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_user_sd_users_on_inc", Storage="_sd_user", ThisKey="sd_user_id", OtherKey="id", IsForeignKey=true)]
		public sd_user sd_user
		{
			get
			{
				return this._sd_user.Entity;
			}
			set
			{
				sd_user previousValue = this._sd_user.Entity;
				if (((previousValue != value) 
							|| (this._sd_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_user.Entity = null;
						previousValue.sd_users_on_incs.Remove(this);
					}
					this._sd_user.Entity = value;
					if ((value != null))
					{
						value.sd_users_on_incs.Add(this);
						this._sd_user_id = value.id;
					}
					else
					{
						this._sd_user_id = default(long);
					}
					this.SendPropertyChanged("sd_user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_inc_sd_users_on_inc", Storage="_sd_inc", ThisKey="sd_inc_id", OtherKey="id", IsForeignKey=true)]
		public sd_inc sd_inc
		{
			get
			{
				return this._sd_inc.Entity;
			}
			set
			{
				sd_inc previousValue = this._sd_inc.Entity;
				if (((previousValue != value) 
							|| (this._sd_inc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_inc.Entity = null;
						previousValue.sd_users_on_incs.Remove(this);
					}
					this._sd_inc.Entity = value;
					if ((value != null))
					{
						value.sd_users_on_incs.Add(this);
						this._sd_inc_id = value.id;
					}
					else
					{
						this._sd_inc_id = default(long);
					}
					this.SendPropertyChanged("sd_inc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sd_inc")]
	public partial class sd_inc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _sd_status_id;
		
		private System.Nullable<System.DateTime> _reg_date;
		
		private string _uinfo;
		
		private string _simptoms;
		
		private System.Nullable<long> _sd_cat_id;
		
		private System.Nullable<System.DateTime> _res_date;
		
		private System.Nullable<System.DateTime> _close_date;
		
		private System.Nullable<long> _sd_problem_id;
		
		private System.Nullable<long> _prior;
		
		private string _des;
		
		private string _desinfo;
		
		private EntitySet<sd_history> _sd_histories;
		
		private EntitySet<sd_users_on_inc> _sd_users_on_incs;
		
		private EntityRef<sd_cat> _sd_cat;
		
		private EntityRef<sd_problem> _sd_problem;
		
		private EntityRef<sd_status> _sd_status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onsd_status_idChanging(System.Nullable<long> value);
    partial void Onsd_status_idChanged();
    partial void Onreg_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onreg_dateChanged();
    partial void OnuinfoChanging(string value);
    partial void OnuinfoChanged();
    partial void OnsimptomsChanging(string value);
    partial void OnsimptomsChanged();
    partial void Onsd_cat_idChanging(System.Nullable<long> value);
    partial void Onsd_cat_idChanged();
    partial void Onres_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onres_dateChanged();
    partial void Onclose_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onclose_dateChanged();
    partial void Onsd_problem_idChanging(System.Nullable<long> value);
    partial void Onsd_problem_idChanged();
    partial void OnpriorChanging(System.Nullable<long> value);
    partial void OnpriorChanged();
    partial void OndesChanging(string value);
    partial void OndesChanged();
    partial void OndesinfoChanging(string value);
    partial void OndesinfoChanged();
    #endregion
		
		public sd_inc()
		{
			this._sd_histories = new EntitySet<sd_history>(new Action<sd_history>(this.attach_sd_histories), new Action<sd_history>(this.detach_sd_histories));
			this._sd_users_on_incs = new EntitySet<sd_users_on_inc>(new Action<sd_users_on_inc>(this.attach_sd_users_on_incs), new Action<sd_users_on_inc>(this.detach_sd_users_on_incs));
			this._sd_cat = default(EntityRef<sd_cat>);
			this._sd_problem = default(EntityRef<sd_problem>);
			this._sd_status = default(EntityRef<sd_status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sd_status_id", DbType="BigInt")]
		public System.Nullable<long> sd_status_id
		{
			get
			{
				return this._sd_status_id;
			}
			set
			{
				if ((this._sd_status_id != value))
				{
					if (this._sd_status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsd_status_idChanging(value);
					this.SendPropertyChanging();
					this._sd_status_id = value;
					this.SendPropertyChanged("sd_status_id");
					this.Onsd_status_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reg_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> reg_date
		{
			get
			{
				return this._reg_date;
			}
			set
			{
				if ((this._reg_date != value))
				{
					this.Onreg_dateChanging(value);
					this.SendPropertyChanging();
					this._reg_date = value;
					this.SendPropertyChanged("reg_date");
					this.Onreg_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uinfo", DbType="VarChar(MAX)")]
		public string uinfo
		{
			get
			{
				return this._uinfo;
			}
			set
			{
				if ((this._uinfo != value))
				{
					this.OnuinfoChanging(value);
					this.SendPropertyChanging();
					this._uinfo = value;
					this.SendPropertyChanged("uinfo");
					this.OnuinfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_simptoms", DbType="VarChar(MAX)")]
		public string simptoms
		{
			get
			{
				return this._simptoms;
			}
			set
			{
				if ((this._simptoms != value))
				{
					this.OnsimptomsChanging(value);
					this.SendPropertyChanging();
					this._simptoms = value;
					this.SendPropertyChanged("simptoms");
					this.OnsimptomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sd_cat_id", DbType="BigInt")]
		public System.Nullable<long> sd_cat_id
		{
			get
			{
				return this._sd_cat_id;
			}
			set
			{
				if ((this._sd_cat_id != value))
				{
					if (this._sd_cat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsd_cat_idChanging(value);
					this.SendPropertyChanging();
					this._sd_cat_id = value;
					this.SendPropertyChanged("sd_cat_id");
					this.Onsd_cat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_res_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> res_date
		{
			get
			{
				return this._res_date;
			}
			set
			{
				if ((this._res_date != value))
				{
					this.Onres_dateChanging(value);
					this.SendPropertyChanging();
					this._res_date = value;
					this.SendPropertyChanged("res_date");
					this.Onres_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_close_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> close_date
		{
			get
			{
				return this._close_date;
			}
			set
			{
				if ((this._close_date != value))
				{
					this.Onclose_dateChanging(value);
					this.SendPropertyChanging();
					this._close_date = value;
					this.SendPropertyChanged("close_date");
					this.Onclose_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sd_problem_id", DbType="BigInt")]
		public System.Nullable<long> sd_problem_id
		{
			get
			{
				return this._sd_problem_id;
			}
			set
			{
				if ((this._sd_problem_id != value))
				{
					if (this._sd_problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsd_problem_idChanging(value);
					this.SendPropertyChanging();
					this._sd_problem_id = value;
					this.SendPropertyChanged("sd_problem_id");
					this.Onsd_problem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prior", DbType="BigInt")]
		public System.Nullable<long> prior
		{
			get
			{
				return this._prior;
			}
			set
			{
				if ((this._prior != value))
				{
					this.OnpriorChanging(value);
					this.SendPropertyChanging();
					this._prior = value;
					this.SendPropertyChanged("prior");
					this.OnpriorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_des", DbType="VarChar(50)")]
		public string des
		{
			get
			{
				return this._des;
			}
			set
			{
				if ((this._des != value))
				{
					this.OndesChanging(value);
					this.SendPropertyChanging();
					this._des = value;
					this.SendPropertyChanged("des");
					this.OndesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_desinfo", DbType="VarChar(50)")]
		public string desinfo
		{
			get
			{
				return this._desinfo;
			}
			set
			{
				if ((this._desinfo != value))
				{
					this.OndesinfoChanging(value);
					this.SendPropertyChanging();
					this._desinfo = value;
					this.SendPropertyChanged("desinfo");
					this.OndesinfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_inc_sd_history", Storage="_sd_histories", ThisKey="id", OtherKey="sd_inc_id")]
		public EntitySet<sd_history> sd_histories
		{
			get
			{
				return this._sd_histories;
			}
			set
			{
				this._sd_histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_inc_sd_users_on_inc", Storage="_sd_users_on_incs", ThisKey="id", OtherKey="sd_inc_id")]
		public EntitySet<sd_users_on_inc> sd_users_on_incs
		{
			get
			{
				return this._sd_users_on_incs;
			}
			set
			{
				this._sd_users_on_incs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_cat_sd_inc", Storage="_sd_cat", ThisKey="sd_cat_id", OtherKey="id", IsForeignKey=true)]
		public sd_cat sd_cat
		{
			get
			{
				return this._sd_cat.Entity;
			}
			set
			{
				sd_cat previousValue = this._sd_cat.Entity;
				if (((previousValue != value) 
							|| (this._sd_cat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_cat.Entity = null;
						previousValue.sd_incs.Remove(this);
					}
					this._sd_cat.Entity = value;
					if ((value != null))
					{
						value.sd_incs.Add(this);
						this._sd_cat_id = value.id;
					}
					else
					{
						this._sd_cat_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("sd_cat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_problem_sd_inc", Storage="_sd_problem", ThisKey="sd_problem_id", OtherKey="id", IsForeignKey=true)]
		public sd_problem sd_problem
		{
			get
			{
				return this._sd_problem.Entity;
			}
			set
			{
				sd_problem previousValue = this._sd_problem.Entity;
				if (((previousValue != value) 
							|| (this._sd_problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_problem.Entity = null;
						previousValue.sd_incs.Remove(this);
					}
					this._sd_problem.Entity = value;
					if ((value != null))
					{
						value.sd_incs.Add(this);
						this._sd_problem_id = value.id;
					}
					else
					{
						this._sd_problem_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("sd_problem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sd_status_sd_inc", Storage="_sd_status", ThisKey="sd_status_id", OtherKey="id", IsForeignKey=true)]
		public sd_status sd_status
		{
			get
			{
				return this._sd_status.Entity;
			}
			set
			{
				sd_status previousValue = this._sd_status.Entity;
				if (((previousValue != value) 
							|| (this._sd_status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sd_status.Entity = null;
						previousValue.sd_incs.Remove(this);
					}
					this._sd_status.Entity = value;
					if ((value != null))
					{
						value.sd_incs.Add(this);
						this._sd_status_id = value.id;
					}
					else
					{
						this._sd_status_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("sd_status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sd_histories(sd_history entity)
		{
			this.SendPropertyChanging();
			entity.sd_inc = this;
		}
		
		private void detach_sd_histories(sd_history entity)
		{
			this.SendPropertyChanging();
			entity.sd_inc = null;
		}
		
		private void attach_sd_users_on_incs(sd_users_on_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_inc = this;
		}
		
		private void detach_sd_users_on_incs(sd_users_on_inc entity)
		{
			this.SendPropertyChanging();
			entity.sd_inc = null;
		}
	}
}
#pragma warning restore 1591
